{"name":"Jmatch3","tagline":"Javascript Match-3 Game Lib","body":"jMatch3\r\n=======\r\n\r\nJavascript Match-3 Game Lib - Node.JS and Browser compatible\r\n\r\n## How to use ?\r\n\r\n### Create a new Grid with width, height and gravity parameters :\r\n\r\n```javascript\r\nvar grid = new jMatch3.Grid({\r\n    width: 6,\r\n    height: 7,\r\n    gravity: \"down\"\r\n});\r\n```\r\n\r\n### Get a piece inside the grid\r\n\r\n```javascript\r\nvar piece = grid.getPiece({ x: 0, y: 0 });\r\n```\r\n\r\n### Update a piece\r\n\r\nA piece has a void object by default, but you can change it with your own\r\n\r\n```javascript\r\npiece.object = { type: \"gem\" };-\r\n```\r\n\r\nOr revert to the void object\r\n\r\n```javascript\r\npiece.clear();\r\n```\r\n\r\nThe void Object type is \"empty\"\r\n\r\n### Display the grid (Debug)\r\n\r\nYou can log the grid with a map of symbols\r\n\r\n```javascript\r\ngrid.debug({\r\n    empty: \"-\",\r\n    gem: \"g\"\r\n});\r\n```\r\n\r\n### Handle matches\r\n\r\nYou can get all current matches\r\n```javascript\r\nvar matches = grid.getMatches();\r\n```\r\n\r\nClear matches to transform all matching pieces object to void object\r\n```javascript\r\ngrid.clearMatches();\r\n```\r\n\r\nApply gravity to fall down your pieces\r\n```javascript\r\ngrid.applyGravity();\r\n```\r\n\r\n## API Documentation\r\n\r\n### Grid\r\n\r\n```javascript\r\n/*\r\n * options:\r\n * - width (default 10)\r\n * - height (default 10)\r\n * - gravity (default false): \"up\", \"right\", \"down\", \"left\", or false \r\n */\r\nvar grid = new jMatch3.Grid({\r\n    width: 6,\r\n    height: 7,\r\n    gravity: \"down\"\r\n});\r\n```\r\n\r\n#### Instance methods\r\n\r\n##### .coordsInWorld(coords)\r\n\r\nReturn if given coords are in the grid\r\n\r\n```javascript\r\ngrid.coordsInWorld({ x: 10, y: 10 }); // return false\r\n```\r\n\r\n##### .getPiece(coords)\r\n\r\nReturn the piece from given coords\r\n\r\n```javascript\r\nvar piece = grid.getPiece({ x: 4, y: 4 });\r\n```\r\n\r\n##### .neighbourOf(piece, direction)\r\n\r\nReturn the piece neighbour of another piece from a given direction\r\n\r\n```javascript\r\nvar neighbour = grid.neighbourOf(piece, \"left\");\r\n```\r\n\r\n##### .neighboursOf(piece)\r\n\r\nReturn a Hash of pieces by direction\r\n\r\n```javascript\r\n// return { up: theUpPiece, down: theDownPiece, right: theRightPiece, left: theLeftPiece }\r\nvar neighbours = grid.neighboursOf(piece);\r\n```\r\n\r\n##### .forEachMatch(callback)\r\n\r\nExecute a callback for each current match\r\n\r\n```javascript\r\ngrid.forEachMatch(function() {\r\n  // Your scoring stuff\r\n});\r\n```\r\n\r\n##### .getMatches()\r\n\r\nReturn an array of matches or false\r\n\r\n```javascript\r\nvar matches = grid.getMatches();\r\n```\r\n\r\n##### .getRow(row, reverse)\r\n\r\nReturn an Array of pieces\r\n\r\n```javascript\r\nvar row = grid.getRow(0);\r\n```\r\n\r\n##### .getColumn(column, reverse)\r\n\r\nReturn an Array of pieces\r\n\r\n```javascript\r\nvar column = grid.getColumn(0);\r\n```\r\n\r\n##### .clearMatches()\r\n\r\nDestroy all matches and update the grid\r\n\r\n```javascript\r\ngrid.clearMatches();\r\n```\r\n\r\n##### .swapPieces(piece1, piece2)\r\n\r\nSwap 2 pieces object\r\n\r\n```javascript\r\ngrid.swapPieces(piece1, piece2);\r\n```\r\n\r\n##### .applyGravity()\r\n\r\nApply gravity to fall down your pieces and return an Array of falling pieces\r\n\r\n```javascript\r\nvar fallingPieces = grid.applyGravity();\r\n```\r\n\r\n##### .debug(symbols)\r\n\r\nLog the current grid with symbols\r\n\r\n```javascript\r\ngrid.debug({\r\n    empty: \"-\",\r\n    gem: \"g\"\r\n});\r\n```\r\n\r\n#### Class method\r\n\r\n##### .getLastEmptyPiece()\r\n\r\nGet last empty piece from an Array of pieces\r\n\r\n```javascript\r\nvar lastEmpty = jMatch3.Grid.getLastEmptyPiece(pieces);\r\n```\r\n\r\n### Piece\r\n\r\nPrivate Class\r\n\r\n```javascript\r\n/*\r\n * Params:\r\n * - grid\r\n * - x\r\n * - y\r\n */\r\nnew Piece(grid, 0, 0);\r\n```\r\n\r\n#### Instance methods\r\n\r\n##### .clear()\r\n\r\nReplace the piece object by a the void object\r\n\r\n```javascript\r\npiece.clear();\r\n```\r\n\r\n##### .relativeCoordinates(direction, distance)\r\n\r\nReturn relatives coordinates to the piece\r\n\r\n```javascript\r\nvar relativeCoordinates = piece.relativeCoordinates(\"right\", 1); // return { x: 1, y: 0 }\r\n```\r\n\r\n##### .neighbour(direction)\r\n\r\nReturn neighbour of the piece from a given direction\r\n\r\n```javascript\r\nvar neighbour = piece.neighbour(\"right\");\r\n```\r\n\r\n##### .neighbours()\r\n\r\nReturn a Hash of pieces by direction\r\n\r\n```javascript\r\n// return { up: theUpPiece, down: theDownPiece, right: theRightPiece, left: theLeftPiece }\r\nvar neighbours = piece.neighbours();\r\n```\r\n\r\n##### .matchingNeighbours()\r\n\r\nReturn an Array of direct Matching Neighbours\r\n\r\n```javascript\r\nvar matchingNeighbours = piece.matchingNeighbours();\r\n```\r\n\r\n##### .deepMatchingNeighbours()\r\n\r\nReturn an Array of deep Matching Neighbours\r\n\r\n```javascript\r\nvar deepMatchingNeighbours = piece.deepMatchingNeighbours();\r\n```\r\n","google":"UA-28735941-1","note":"Don't delete this file! It's used internally to help with page regeneration."}